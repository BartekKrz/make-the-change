#!/usr/bin/env tsx

/**
 * GENERATE BLURHASH - Make the CHANGE
 *
 * G√©n√®re les BlurHash pour toutes les images des producers et projects
 * Mise √† jour de la base de donn√©es avec les placeholders intelligents
 */

import { createClient } from '@supabase/supabase-js';
import sharp from 'sharp';
import { encode } from 'blurhash';

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('Assurez-vous que NEXT_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY sont d√©finies');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Interface pour les statistiques
interface BlurHashStats {
  totalImages: number;
  processedImages: number;
  successfulHashes: number;
  failedHashes: number;
  startTime: Date;
  endTime?: Date;
}

// Fonction principale pour g√©n√©rer BlurHash
async function generateBlurHash(imageUrl: string): Promise<string> {
  try {
    console.log(`üîó T√©l√©chargement: ${imageUrl}`);

    // T√©l√©charger l'image
    const response = await fetch(imageUrl);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const arrayBuffer = await response.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    console.log(`üìè Taille: ${(buffer.length / 1024).toFixed(1)}KB`);

    // Redimensionner pour BlurHash (optimis√©)
    const { data, info } = await sharp(buffer)
      .resize(32, 32, { fit: 'inside', withoutEnlargement: true })
      .ensureAlpha()
      .raw()
      .toBuffer({ resolveWithObject: true });

    console.log(`üé® Dimensions: ${info.width}x${info.height}`);

    // G√©n√©rer le BlurHash
    const hash = encode(new Uint8ClampedArray(data), info.width, info.height, 4, 3);

    console.log(`‚úÖ BlurHash g√©n√©r√©: ${hash.substring(0, 20)}...`);
    return hash;

  } catch (error) {
    console.error(`‚ùå Erreur g√©n√©ration BlurHash:`, error);
    return '';
  }
}

// Fonction pour traiter les producers
async function processProducers(stats: BlurHashStats): Promise<void> {
  console.log('\nüè≠ TRAITEMENT DES PRODUCERS');

  const { data: producers, error } = await supabase
    .from('producers')
    .select('id, name, logo_url, cover_image, gallery_images')
    .not('logo_url', 'is', null);

  if (error) {
    console.error('‚ùå Erreur r√©cup√©ration producers:', error);
    return;
  }

  console.log(`üìä ${producers?.length || 0} producers trouv√©s`);

  for (const producer of producers || []) {
    console.log(`\nüë§ Traitement: ${producer.name}`);

    const allImages: string[] = [];
    const imageTypes: string[] = [];

    // Logo
    if (producer.logo_url) {
      allImages.push(producer.logo_url);
      imageTypes.push('logo');
    }

    // Cover
    if (producer.cover_image) {
      allImages.push(producer.cover_image);
      imageTypes.push('cover');
    }

    // Galerie
    if (producer.gallery_images && Array.isArray(producer.gallery_images)) {
      allImages.push(...producer.gallery_images);
      for (let i = 0; i < producer.gallery_images.length; i++) {
        imageTypes.push(`gallery_${i + 1}`);
      }
    }

    console.log(`üñºÔ∏è  ${allImages.length} images √† traiter`);

    const blurHashes: string[] = [];

    for (let i = 0; i < allImages.length; i++) {
      const imageUrl = allImages[i];
      const imageType = imageTypes[i];

      console.log(`  [${i + 1}/${allImages.length}] ${imageType}: ${imageUrl.split('/').pop()}`);

      stats.totalImages++;
      const hash = await generateBlurHash(imageUrl);

      if (hash) {
        blurHashes.push(hash);
        stats.successfulHashes++;
      } else {
        stats.failedHashes++;
      }

      stats.processedImages++;

      // Petit d√©lai pour √©viter de surcharger
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    // Mettre √† jour la base de donn√©es
    if (blurHashes.length > 0) {
      const { error: updateError } = await supabase
        .from('producers')
        .update({ blur_hashes: blurHashes })
        .eq('id', producer.id);

      if (updateError) {
        console.error(`‚ùå Erreur mise √† jour producer ${producer.name}:`, updateError);
      } else {
        console.log(`‚úÖ ${producer.name}: ${blurHashes.length} BlurHash sauvegard√©s`);
      }
    }

    // Petit d√©lai entre producers
    await new Promise(resolve => setTimeout(resolve, 500));
  }
}

// Fonction pour traiter les projects
async function processProjects(stats: BlurHashStats): Promise<void> {
  console.log('\nüèóÔ∏è  TRAITEMENT DES PROJECTS');

  const { data: projects, error } = await supabase
    .from('projects')
    .select(`
      id,
      name,
      hero_image,
      gallery_images,
      producers!inner(name)
    `)
    .not('hero_image', 'is', null);

  if (error) {
    console.error('‚ùå Erreur r√©cup√©ration projects:', error);
    return;
  }

  console.log(`üìä ${projects?.length || 0} projects trouv√©s`);

  for (const project of projects || []) {
    console.log(`\nüèóÔ∏è  Traitement: ${project.name} (${project.producers?.name})`);

    const allImages: string[] = [];
    const imageTypes: string[] = [];

    // Hero image
    if (project.hero_image) {
      allImages.push(project.hero_image);
      imageTypes.push('hero');
    }

    // Galerie
    if (project.gallery_images && Array.isArray(project.gallery_images)) {
      allImages.push(...project.gallery_images);
      for (let i = 0; i < project.gallery_images.length; i++) {
        imageTypes.push(`gallery_${i + 1}`);
      }
    }

    console.log(`üñºÔ∏è  ${allImages.length} images √† traiter`);

    const blurHashes: string[] = [];

    for (let i = 0; i < allImages.length; i++) {
      const imageUrl = allImages[i];
      const imageType = imageTypes[i];

      console.log(`  [${i + 1}/${allImages.length}] ${imageType}: ${imageUrl.split('/').pop()}`);

      stats.totalImages++;
      const hash = await generateBlurHash(imageUrl);

      if (hash) {
        blurHashes.push(hash);
        stats.successfulHashes++;
      } else {
        stats.failedHashes++;
      }

      stats.processedImages++;

      // Petit d√©lai pour √©viter de surcharger
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    // Mettre √† jour la base de donn√©es
    if (blurHashes.length > 0) {
      const { error: updateError } = await supabase
        .from('projects')
        .update({ blur_hashes: blurHashes })
        .eq('id', project.id);

      if (updateError) {
        console.error(`‚ùå Erreur mise √† jour project ${project.name}:`, updateError);
      } else {
        console.log(`‚úÖ ${project.name}: ${blurHashes.length} BlurHash sauvegard√©s`);
      }
    }

    // Petit d√©lai entre projects
    await new Promise(resolve => setTimeout(resolve, 500));
  }
}

// Fonction principale
async function main() {
  console.log('üöÄ D√âBUT G√âN√âRATION BLURHASH - Make the CHANGE');
  console.log('================================================');

  const stats: BlurHashStats = {
    totalImages: 0,
    processedImages: 0,
    successfulHashes: 0,
    failedHashes: 0,
    startTime: new Date()
  };

  try {
    // Traiter les producers
    await processProducers(stats);

    // Traiter les projects
    await processProjects(stats);

    // Finaliser les statistiques
    stats.endTime = new Date();
    const duration = stats.endTime.getTime() - stats.startTime.getTime();

    console.log('\n================================================');
    console.log('üéâ G√âN√âRATION BLURHASH TERMIN√âE');
    console.log('================================================');
    console.log(`‚è±Ô∏è  Dur√©e: ${(duration / 1000).toFixed(1)}s`);
    console.log(`üñºÔ∏è  Total images: ${stats.totalImages}`);
    console.log(`‚úÖ R√©ussites: ${stats.successfulHashes}`);
    console.log(`‚ùå √âchecs: ${stats.failedHashes}`);
    console.log(`üìä Taux succ√®s: ${((stats.successfulHashes / stats.totalImages) * 100).toFixed(1)}%`);

    if (stats.failedHashes > 0) {
      console.log('\n‚ö†Ô∏è  Quelques images ont √©chou√©. V√©rifiez les logs ci-dessus.');
    }

    console.log('\nüéØ PROCHAINES √âTAPES:');
    console.log('1. Tester les BlurHash dans l\'interface');
    console.log('2. V√©rifier les placeholders lors du loading');
    console.log('3. Mesurer l\'am√©lioration UX');

  } catch (error) {
    console.error('üí• ERREUR FATALE:', error);
    process.exit(1);
  }
}

// Gestion des signaux d'arr√™t
process.on('SIGINT', () => {
  console.log('\n‚èπÔ∏è  Arr√™t demand√© par l\'utilisateur');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n‚èπÔ∏è  Arr√™t demand√© par le syst√®me');
  process.exit(0);
});

// Lancer le script
if (require.main === module) {
  main().catch(console.error);
}

export { generateBlurHash, processProducers, processProjects };
