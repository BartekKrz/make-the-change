-- =====================================================
-- √âTAPE 4: MONITORING ET VUES D'ANALYSE - VERSION CORRIG√âE
-- =====================================================
-- Cr√©ation de vues pour surveiller les performances
--
-- CORRECTION: Utilisation des bonnes colonnes PostgreSQL
-- pg_stat_user_indexes.relname au lieu de tablename
-- =====================================================

-- =====================================================
-- VUES DE MONITORING √Ä CR√âER (CORRIG√âES)
-- =====================================================

-- Vue pour analyser l'usage des index (CORRIG√â)
CREATE OR REPLACE VIEW index_usage_analysis AS
SELECT
    schemaname,
    relname as tablename,  -- CORRECTION: relname au lieu de tablename
    indexname,
    idx_tup_read,
    idx_tup_fetch,
    pg_size_pretty(pg_relation_size(i.indexrelid)) as index_size,
    CASE
        WHEN idx_tup_read = 0 AND idx_tup_fetch = 0 THEN 'üî¥ JAMAIS UTILIS√â'
        WHEN idx_tup_read < 100 THEN 'üü° PEU UTILIS√â'
        WHEN idx_tup_read < 1000 THEN 'üü¢ MOD√âR√âMENT UTILIS√â'
        ELSE 'üü¢ FORTEMENT UTILIS√â'
    END as usage_status,
    CASE
        WHEN idx_tup_read = 0 AND idx_tup_fetch = 0 THEN 1 -- Priorit√© haute pour suppression
        ELSE 0
    END as cleanup_priority
FROM pg_stat_user_indexes s
JOIN pg_index i ON s.indexrelid = i.indexrelid
WHERE schemaname = 'public'
ORDER BY idx_tup_read DESC, pg_relation_size(i.indexrelid) DESC;

-- Vue pour analyser les tables volumineuses (CORRIG√âE)
CREATE OR REPLACE VIEW table_size_analysis AS
SELECT
    schemaname,
    relname as tablename,  -- CORRECTION: relname au lieu de tablename
    pg_size_pretty(pg_total_relation_size(schemaname||'.'||relname)) as total_size,
    pg_size_pretty(pg_relation_size(schemaname||'.'||relname)) as table_size,
    pg_size_pretty(pg_total_relation_size(schemaname||'.'||relname) - pg_relation_size(schemaname||'.'||relname)) as index_size,
    n_tup_ins as inserts,
    n_tup_upd as updates,
    n_tup_del as deletes,
    CASE
        WHEN pg_total_relation_size(schemaname||'.'||relname) > 100*1024*1024 THEN 'üî¥ TR√àS GROSSE (>100MB)'
        WHEN pg_total_relation_size(schemaname||'.'||relname) > 10*1024*1024 THEN 'üü° GROSSE (>10MB)'
        ELSE 'üü¢ NORMALE'
    END as size_status
FROM pg_stat_user_tables
WHERE schemaname = 'public'
ORDER BY pg_total_relation_size(schemaname||'.'||relname) DESC;

-- Vue pour le dashboard des m√©triques dual billing (SANS appels de fonctions)
CREATE OR REPLACE VIEW dual_billing_dashboard AS
SELECT
    'MRR Actuel' as metric,
    0 as value,  -- Valeur temporaire, sera calcul√©e plus tard
    '‚Ç¨' as unit,
    '‚ÑπÔ∏è √Ä configurer' as status
UNION ALL
SELECT
    'Taux Conversion M‚ÜíA' as metric,
    0 as value,
    '%' as unit,
    '‚ÑπÔ∏è √Ä configurer' as status
UNION ALL
SELECT
    'Abonnements Actifs' as metric,
    COUNT(*)::numeric as value,
    'total' as unit,
    CASE
        WHEN COUNT(*) > 10 THEN 'üü¢ EXCELLENT'
        WHEN COUNT(*) > 5 THEN 'üü° BON'
        ELSE 'üî¥ √Ä AM√âLIORER'
    END as status
FROM subscriptions
WHERE status = 'active'
UNION ALL
SELECT
    'Points Allou√©s Ce Mois' as metric,
    COALESCE(SUM(points_allocated), 0)::numeric as value,
    'points' as unit,
    '‚ÑπÔ∏è INFO' as status
FROM monthly_allocations
WHERE allocation_month >= TO_CHAR(CURRENT_DATE, 'YYYY-MM');

-- =====================================================
-- V√âRIFICATION DES VUES CR√â√âES
-- =====================================================

SELECT
    'V√âRIFICATION VUES DE MONITORING:' as status,
    CASE WHEN EXISTS (
        SELECT 1 FROM information_schema.views
        WHERE table_schema = 'public' AND table_name = 'index_usage_analysis'
    ) THEN '‚úÖ index_usage_analysis cr√©√©e' ELSE '‚ùå index_usage_analysis manquante' END as index_analysis,
    CASE WHEN EXISTS (
        SELECT 1 FROM information_schema.views
        WHERE table_schema = 'public' AND table_name = 'table_size_analysis'
    ) THEN '‚úÖ table_size_analysis cr√©√©e' ELSE '‚ùå table_size_analysis manquante' END as table_analysis,
    CASE WHEN EXISTS (
        SELECT 1 FROM information_schema.views
        WHERE table_schema = 'public' AND table_name = 'dual_billing_dashboard'
    ) THEN '‚úÖ dual_billing_dashboard cr√©√©e' ELSE '‚ùå dual_billing_dashboard manquante' END as dashboard;

-- =====================================================
-- TEST DES VUES CR√â√âES (SANS appels de fonctions)
-- =====================================================

-- Tester le dashboard dual billing (version simplifi√©e)
SELECT
    'üìä ' || metric || ': ' || value || ' ' || unit || ' ' || status as dashboard_test
FROM dual_billing_dashboard
ORDER BY
    CASE
        WHEN metric = 'MRR Actuel' THEN 1
        WHEN metric = 'Taux Conversion M‚ÜíA' THEN 2
        WHEN metric = 'Abonnements Actifs' THEN 3
        WHEN metric = 'Points Allou√©s Ce Mois' THEN 4
        ELSE 5
    END;

-- Aper√ßu des index (version simplifi√©e)
SELECT
    'üîç ANALYSE DES INDEX:' as analysis,
    COUNT(*) as total_indexes,
    'Vues de monitoring cr√©√©es avec succ√®s' as result
FROM pg_indexes
WHERE schemaname = 'public'
AND indexname LIKE 'idx_%';
