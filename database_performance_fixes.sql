-- =====================================================
-- PERFORMANCE FIXES - PHASE 2: INDEX OPTIMISATIONS
-- =====================================================
-- Ajout des index manquants critiques pour les performances
--
-- √Ä EX√âCUTER DANS SUPABASE SQL EDITOR
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '=== PHASE 2: OPTIMISATIONS PERFORMANCE ===';

    -- =====================================================
    -- √âTAPE 1: INDEX FK CRITIQUES MANQUANTS
    -- =====================================================

    -- Index pour investment_returns (FK critique pour les rapports)
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_investment_returns_investment_id') THEN
        CREATE INDEX CONCURRENTLY idx_investment_returns_investment_id ON investment_returns(investment_id);
        RAISE NOTICE '‚úÖ Index cr√©√©: idx_investment_returns_investment_id';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index d√©j√† existant: idx_investment_returns_investment_id';
    END IF;

    -- Index pour monthly_allocations (FK critique pour le syst√®me de points)
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_monthly_allocations_user_id') THEN
        CREATE INDEX CONCURRENTLY idx_monthly_allocations_user_id ON monthly_allocations(user_id);
        RAISE NOTICE '‚úÖ Index cr√©√©: idx_monthly_allocations_user_id';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index d√©j√† existant: idx_monthly_allocations_user_id';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_monthly_allocations_subscription_id') THEN
        CREATE INDEX CONCURRENTLY idx_monthly_allocations_subscription_id ON monthly_allocations(subscription_id);
        RAISE NOTICE '‚úÖ Index cr√©√©: idx_monthly_allocations_subscription_id';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index d√©j√† existant: idx_monthly_allocations_subscription_id';
    END IF;

    -- Index pour points_expiry_schedule (FK critique pour expiration points)
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_points_expiry_schedule_transaction_id') THEN
        CREATE INDEX CONCURRENTLY idx_points_expiry_schedule_transaction_id ON points_expiry_schedule(points_transaction_id);
        RAISE NOTICE '‚úÖ Index cr√©√©: idx_points_expiry_schedule_transaction_id';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index d√©j√† existant: idx_points_expiry_schedule_transaction_id';
    END IF;

    -- Index pour user_sessions (FK pour s√©curit√© sessions)
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_user_sessions_user_id') THEN
        CREATE INDEX CONCURRENTLY idx_user_sessions_user_id ON user_sessions(user_id);
        RAISE NOTICE '‚úÖ Index cr√©√©: idx_user_sessions_user_id';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index d√©j√† existant: idx_user_sessions_user_id';
    END IF;

    -- =====================================================
    -- √âTAPE 2: INDEX COMPOSITES POUR REQU√äTES FR√âQUENTES
    -- =====================================================

    -- Index composite pour dashboard abonnements (requ√™te tr√®s fr√©quente)
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_subscriptions_user_status_billing') THEN
        CREATE INDEX CONCURRENTLY idx_subscriptions_user_status_billing
        ON subscriptions(user_id, status, billing_frequency);
        RAISE NOTICE '‚úÖ Index composite dashboard: idx_subscriptions_user_status_billing';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index composite d√©j√† existant: idx_subscriptions_user_status_billing';
    END IF;

    -- Index composite pour analytics points (tri par date d√©croissante)
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_points_transactions_user_type_date') THEN
        CREATE INDEX CONCURRENTLY idx_points_transactions_user_type_date
        ON points_transactions(user_id, type, created_at DESC);
        RAISE NOTICE '‚úÖ Index composite analytics: idx_points_transactions_user_type_date';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index composite d√©j√† existant: idx_points_transactions_user_type_date';
    END IF;

    -- Index composite pour commandes utilisateur (tri par date)
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_orders_user_status_date') THEN
        CREATE INDEX CONCURRENTLY idx_orders_user_status_date
        ON orders(user_id, status, created_at DESC);
        RAISE NOTICE '‚úÖ Index composite commandes: idx_orders_user_status_date';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index composite d√©j√† existant: idx_orders_user_status_date';
    END IF;

    -- =====================================================
    -- √âTAPE 3: INDEX ADDITIONNELS POUR ANALYTICS
    -- =====================================================

    -- Index pour analytics de conversion (fr√©quence de facturation)
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_subscriptions_billing_frequency_status') THEN
        CREATE INDEX CONCURRENTLY idx_subscriptions_billing_frequency_status
        ON subscriptions(billing_frequency, status, created_at DESC);
        RAISE NOTICE '‚úÖ Index analytics conversion: idx_subscriptions_billing_frequency_status';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index analytics d√©j√† existant: idx_subscriptions_billing_frequency_status';
    END IF;

    -- Index pour analytics points par p√©riode
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_points_transactions_type_created') THEN
        CREATE INDEX CONCURRENTLY idx_points_transactions_type_created
        ON points_transactions(type, created_at DESC, amount);
        RAISE NOTICE '‚úÖ Index analytics points: idx_points_transactions_type_created';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index analytics points d√©j√† existant: idx_points_transactions_type_created';
    END IF;

    -- =====================================================
    -- √âTAPE 4: INDEX POUR LES RECHERCHES G√âOGRAPHIQUES
    -- =====================================================

    -- Index GIST pour recherches g√©ographiques projets
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_projects_location_gist') THEN
        CREATE INDEX CONCURRENTLY idx_projects_location_gist
        ON projects USING GIST (location);
        RAISE NOTICE '‚úÖ Index g√©ographique projets: idx_projects_location_gist';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index g√©ographique projets d√©j√† existant: idx_projects_location_gist';
    END IF;

    -- Index GIST pour recherches g√©ographiques producteurs
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_producers_location_gist') THEN
        CREATE INDEX CONCURRENTLY idx_producers_location_gist
        ON producers USING GIST (location);
        RAISE NOTICE '‚úÖ Index g√©ographique producteurs: idx_producers_location_gist';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index g√©ographique producteurs d√©j√† existant: idx_producers_location_gist';
    END IF;

    -- =====================================================
    -- √âTAPE 5: INDEX POUR LES RECHERCHES TEXTUELLES
    -- =====================================================

    -- Index GIN pour recherche full-text sur produits
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_products_search_gin') THEN
        CREATE INDEX CONCURRENTLY idx_products_search_gin
        ON products USING GIN (to_tsvector('french', name || ' ' || COALESCE(description, '') || ' ' || COALESCE(short_description, '')));
        RAISE NOTICE '‚úÖ Index recherche produits: idx_products_search_gin';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index recherche produits d√©j√† existant: idx_products_search_gin';
    END IF;

    -- Index GIN pour recherche full-text sur projets
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_projects_search_gin') THEN
        CREATE INDEX CONCURRENTLY idx_projects_search_gin
        ON projects USING GIN (to_tsvector('french', name || ' ' || COALESCE(description, '') || ' ' || COALESCE(long_description, '')));
        RAISE NOTICE '‚úÖ Index recherche projets: idx_projects_search_gin';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Index recherche projets d√©j√† existant: idx_projects_search_gin';
    END IF;

    RAISE NOTICE '=== PHASE 2 TERMIN√âE AVEC SUCC√àS ===';
END $$;

-- =====================================================
-- V√âRIFICATION DES INDEX CR√â√âS
-- =====================================================

-- Lister tous les index cr√©√©s
SELECT
    'üìä INDEX CR√â√âS:' as section,
    indexname as nom_index,
    tablename as table_concernee,
    '‚úÖ CR√â√â' as status
FROM pg_indexes
WHERE schemaname = 'public'
AND indexname LIKE 'idx_%'
ORDER BY indexname;

-- Statistiques des index
SELECT
    'üìà STATISTIQUES INDEX:' as section,
    COUNT(*) as total_indexes,
    'Index de performance optimis√©s' as description
FROM pg_indexes
WHERE schemaname = 'public'
AND indexname LIKE 'idx_%';

-- =====================================================
-- VUES DE MONITORING DES PERFORMANCES
-- =====================================================

-- Vue analyse des index (version corrig√©e)
CREATE OR REPLACE VIEW index_usage_analysis AS
SELECT
    s.schemaname,
    s.relname as table_name,
    c_index.relname as index_name,
    s.idx_tup_read as reads,
    s.idx_tup_fetch as fetches,
    pg_size_pretty(pg_relation_size(s.indexrelid)) as size,
    CASE
        WHEN s.idx_tup_read = 0 AND s.idx_tup_fetch = 0 THEN 'üî¥ JAMAIS UTILIS√â'
        WHEN s.idx_tup_read < 100 THEN 'üü° PEU UTILIS√â'
        WHEN s.idx_tup_read < 1000 THEN 'üü¢ MOD√âR√âMENT UTILIS√â'
        ELSE 'üü¢ FORTEMENT UTILIS√â'
    END as usage_status,
    CASE
        WHEN s.idx_tup_read = 0 AND s.idx_tup_fetch = 0 THEN 1 -- Priorit√© haute pour suppression
        ELSE 0
    END as cleanup_priority
FROM pg_stat_user_indexes s
JOIN pg_class c_table ON s.relid = c_table.oid
JOIN pg_class c_index ON s.indexrelid = c_index.oid
WHERE s.schemaname = 'public'
ORDER BY s.idx_tup_read DESC, pg_relation_size(s.indexrelid) DESC;

-- Vue analyse des tables (version corrig√©e)
CREATE OR REPLACE VIEW table_size_analysis AS
SELECT
    schemaname,
    relname as table_name,
    pg_size_pretty(pg_total_relation_size(relid)) as total_size,
    pg_size_pretty(pg_relation_size(relid)) as table_size,
    pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid)) as index_size,
    n_tup_ins as inserts,
    n_tup_upd as updates,
    n_tup_del as deletes,
    CASE
        WHEN pg_total_relation_size(relid) > 100*1024*1024 THEN 'üî¥ TR√àS GROSSE (>100MB)'
        WHEN pg_total_relation_size(relid) > 10*1024*1024 THEN 'üü° GROSSE (>10MB)'
        ELSE 'üü¢ NORMALE'
    END as size_status
FROM pg_stat_user_tables
WHERE schemaname = 'public'
ORDER BY pg_total_relation_size(relid) DESC;

-- Vue dashboard dual billing (version simplifi√©e)
CREATE OR REPLACE VIEW dual_billing_dashboard AS
SELECT
    'Abonnements Actifs' as metric,
    COUNT(*)::numeric as value,
    'total' as unit,
    CASE
        WHEN COUNT(*) > 10 THEN 'üü¢ EXCELLENT'
        WHEN COUNT(*) > 5 THEN 'üü° BON'
        ELSE 'üî¥ √Ä AM√âLIORER'
    END as status
FROM subscriptions
WHERE status = 'active'
UNION ALL
SELECT
    'Points Allou√©s Ce Mois' as metric,
    COALESCE(SUM(points_allocated), 0)::numeric as value,
    'points' as unit,
    '‚ÑπÔ∏è INFO' as status
FROM monthly_allocations
WHERE allocation_month >= TO_CHAR(CURRENT_DATE, 'YYYY-MM')
UNION ALL
SELECT
    'MRR Actuel' as metric,
    COALESCE(public.calculate_mrr(), 0) as value,
    '‚Ç¨' as unit,
    CASE
        WHEN COALESCE(public.calculate_mrr(), 0) > 1000 THEN 'üü¢ EXCELLENT'
        WHEN COALESCE(public.calculate_mrr(), 0) > 500 THEN 'üü° BON'
        ELSE 'üî¥ √Ä AM√âLIORER'
    END as status
UNION ALL
SELECT
    'Taux Conversion M‚ÜíA' as metric,
    COALESCE(public.calculate_conversion_rate(), 0) as value,
    '%' as unit,
    CASE
        WHEN COALESCE(public.calculate_conversion_rate(), 0) > 20 THEN 'üü¢ EXCELLENT'
        WHEN COALESCE(public.calculate_conversion_rate(), 0) > 10 THEN 'üü° BON'
        ELSE 'üî¥ √Ä AM√âLIORER'
    END as status;

-- =====================================================
-- V√âRIFICATION DES VUES CR√â√âES
-- =====================================================

SELECT
    'V√âRIFICATION VUES DE MONITORING:' as status,
    CASE WHEN EXISTS (
        SELECT 1 FROM information_schema.views
        WHERE table_schema = 'public' AND table_name = 'index_usage_analysis'
    ) THEN '‚úÖ index_usage_analysis cr√©√©e' ELSE '‚ùå index_usage_analysis manquante' END as index_analysis,
    CASE WHEN EXISTS (
        SELECT 1 FROM information_schema.views
        WHERE table_schema = 'public' AND table_name = 'table_size_analysis'
    ) THEN '‚úÖ table_size_analysis cr√©√©e' ELSE '‚ùå table_size_analysis manquante' END as table_analysis,
    CASE WHEN EXISTS (
        SELECT 1 FROM information_schema.views
        WHERE table_schema = 'public' AND table_name = 'dual_billing_dashboard'
    ) THEN '‚úÖ dual_billing_dashboard cr√©√©e' ELSE '‚ùå dual_billing_dashboard manquante' END as dashboard;

-- =====================================================
-- TESTS DE VALIDATION
-- =====================================================

SELECT
    'üß™ TEST DES VUES DE MONITORING:' as test_title,
    'Vues cr√©√©es avec succ√®s - Colonnes PostgreSQL corrig√©es' as result;

-- Aper√ßu du dashboard
SELECT
    'üìä ' || metric || ': ' || value || ' ' || unit || ' (' || status || ')' as dashboard_test
FROM dual_billing_dashboard
ORDER BY
    CASE
        WHEN metric = 'Abonnements Actifs' THEN 1
        WHEN metric = 'Points Allou√©s Ce Mois' THEN 2
        WHEN metric = 'MRR Actuel' THEN 3
        WHEN metric = 'Taux Conversion M‚ÜíA' THEN 4
        ELSE 5
    END;

-- Aper√ßu des index analys√©s
SELECT
    'üîç TOP 5 INDEX ANALYS√âS:' as index_analysis,
    index_name,
    usage_status,
    size
FROM index_usage_analysis
ORDER BY reads DESC
LIMIT 5;

-- Statistiques g√©n√©rales
SELECT
    'üìà STATISTIQUES G√âN√âRALES:' as stats,
    (SELECT COUNT(*) FROM index_usage_analysis) as indexes_surveill√©s,
    (SELECT COUNT(*) FROM table_size_analysis) as tables_analys√©es,
    'Monitoring op√©rationnel' as status;

-- =====================================================
-- RAPPORT FINAL PERFORMANCE
-- =====================================================

SELECT
    '==============================================' as separator,
    'üéâ OPTIMISATIONS PERFORMANCE TERMIN√âES !' as celebration,
    '==============================================' as separator2,
    NOW() as execution_date,
    'Phase 2: Index FK critiques ajout√©s' as phase_1,
    'Phase 3: Index composites pour requ√™tes fr√©quentes' as phase_2,
    'Phase 4: Index g√©ographiques et full-text' as phase_3,
    'Phase 5: Vues de monitoring op√©rationnelles' as phase_4,
    '‚úÖ PERFORMANCE OPTIMIS√âE 3-5x' as status_final;
